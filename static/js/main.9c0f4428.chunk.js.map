{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getHeapSortAnimations","n","downHeapify","temp","heapSortHelper","arr","idx","maxidx","lci","rci","getQuickSortAnimations","quickSortHelper","left","right","tmp","pivotIdx","trunc","pivot","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","min","selectionSortHelper","getSelectionSortAnimations","insertionSortHelper","getInsertionSortAnimations","bubbleSortHelper","getBubbleSortAnimations","javaScriptSortedArray","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","className","map","value","key","onClick","mergeSort","heapSort","quickSort","selectionSort","bubbleSort","insertionSort","testSortingAlgorithms","React","Component","max","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9c0f4428.chunk.js","sourcesContent":["//====================== Merge Sort Algorithm ==========================================\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\n\r\n//============== Heap Sort Algorithm ====================================================\r\nexport function getHeapSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  heapSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction heapSortHelper(mainArray, animations) {\r\n  var n = mainArray.length - 1;\r\n  for (let i = n; i >= 0; i--) {\r\n    downHeapify(mainArray, i, n, animations);\r\n  }\r\n  for (let i = 0; i <= n; i++) {\r\n\r\n    // Swaping last element with first and calling downHeapify agina.\r\n    animations.push([0, n - i]);\r\n    animations.push([0, n - i]);\r\n    animations.push([0, mainArray[n - i]]);\r\n\r\n    var temp = mainArray[0];\r\n    mainArray[0] = mainArray[n - i];\r\n    mainArray[n - i] = temp;\r\n\r\n    animations.push([0, n - i]);\r\n    animations.push([0, n - i]);\r\n    animations.push([n - i, mainArray[n - i]]);\r\n\r\n    downHeapify(mainArray, 0, n - i, animations);\r\n  }\r\n}\r\n\r\nfunction downHeapify(arr, idx, n, animations) {\r\n  let maxidx = idx;\r\n  let lci = 2 * idx + 1;\r\n  let rci = 2 * idx + 2;\r\n\r\n  if (lci < n && (arr[lci] - arr[maxidx]) > 0) {\r\n    animations.push([lci, maxidx]);\r\n    animations.push([lci, maxidx]);\r\n    animations.push([lci, arr[lci]]);\r\n    maxidx = lci;\r\n  }\r\n\r\n  if (rci < n && (arr[rci] - arr[maxidx]) > 0) {\r\n    animations.push([rci, maxidx]);\r\n    animations.push([rci, maxidx]);\r\n    animations.push([rci, arr[rci]]);\r\n    maxidx = rci;\r\n  }\r\n\r\n  if (maxidx !== idx) {\r\n\r\n    animations.push([idx, maxidx]);\r\n    animations.push([idx, maxidx]);\r\n    animations.push([idx, arr[maxidx]]);\r\n\r\n    var temp = arr[idx];\r\n    arr[idx] = arr[maxidx];\r\n    arr[maxidx] = temp;\r\n\r\n    animations.push([idx, maxidx]);\r\n    animations.push([idx, maxidx]);\r\n    animations.push([maxidx, arr[maxidx]]);\r\n\r\n    downHeapify(arr, maxidx, n, animations);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//================ Quick Sort Algorithm ===================================================\r\nexport function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  // const auxiliaryArray = array.slice();\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(arr, left, right, animations) {\r\n  var i = left;\r\n  var j = right;\r\n  var tmp;\r\n  var pivotIdx = Math.trunc((left + right) / 2);\r\n  var pivot = arr[pivotIdx];\r\n\r\n  /* partition */\r\n  while (i <= j) {\r\n    while (arr[i] < pivot) {\r\n      animations.push([i, pivotIdx]);\r\n      animations.push([i, pivotIdx]);\r\n      animations.push([i, arr[i]]);\r\n      i++;\r\n    }\r\n\r\n    while (arr[j] > pivot) {\r\n      animations.push([j, pivotIdx]);\r\n      animations.push([j, pivotIdx]);\r\n      animations.push([j, arr[j]]);\r\n      j--;\r\n    }\r\n\r\n    if (i <= j) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      animations.push([i, arr[j]]);\r\n\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      animations.push([j, arr[i]]);\r\n      tmp = arr[i];\r\n\r\n      arr[i] = arr[j];\r\n\r\n      arr[j] = tmp;\r\n\r\n      i++;\r\n\r\n      j--;\r\n    }\r\n  };\r\n\r\n  /* recursion */\r\n\r\n  if (left < j)\r\n\r\n    quickSortHelper(arr, left, j, animations);\r\n\r\n  if (i < right)\r\n\r\n    quickSortHelper(arr, i, right, animations);\r\n}\r\n\r\n\r\n\r\n//================ Bubble Sorting Algorithm=================================================\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  bubbleSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(mainArray, animations) {\r\n  for (let i = 0; i < mainArray.length - 1; i++) {\r\n    for (let j = 0; j < mainArray.length - 1 - i; j++) {\r\n      // animations.push([j, j + 1]);\r\n      // animations.push([j, j + 1]);\r\n      // animations.push([j, mainArray[j]]);\r\n      if (mainArray[j] > mainArray[j + 1]) {\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, mainArray[j + 1]]);\r\n        const temp = mainArray[j];\r\n        mainArray[j] = mainArray[j + 1];\r\n        mainArray[j + 1] = temp;\r\n      } else {\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, mainArray[j]]);\r\n      }\r\n    }\r\n    animations.push([mainArray.length - 1 - i, mainArray.length - 1 - i]);\r\n    animations.push([mainArray.length - 1 - i, mainArray.length - 1 - i]);\r\n    animations.push([\r\n      mainArray.length - 1 - i,\r\n      mainArray[mainArray.length - 1 - i],\r\n    ]);\r\n  }\r\n}\r\n\r\n\r\n\r\n//================= Selection Sort =========================================================\r\nexport function getSelectionSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  selectionSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction selectionSortHelper(mainArray, animations) {\r\n  var min = 0;\r\n  for (let i = 0; i < mainArray.length - 1; i++) {\r\n    min = i;\r\n    for (let j = i + 1; j < mainArray.length; j++) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      animations.push([j, mainArray[j]]);\r\n      if (mainArray[min] > mainArray[j]) {\r\n        min = j;\r\n      }\r\n    }\r\n    animations.push([i, min]);\r\n    animations.push([i, min]);\r\n    animations.push([i, mainArray[min]]);\r\n    var temp = mainArray[min];\r\n    mainArray[min] = mainArray[i];\r\n    mainArray[i] = temp;\r\n  }\r\n}\r\n\r\n\r\n//===================== Insertion Sort Algorithm ==========================================\r\nexport function getInsertionSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  insertionSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction insertionSortHelper(mainArray, animations) {\r\n  for (let i = 0; i < mainArray.length; i++) {\r\n    let j = i;\r\n\r\n    //i is not the first element\r\n    while (j > 0) {\r\n      //not in order\r\n      if (mainArray[j - 1] > mainArray[j]) {\r\n        animations.push([j - 1, j]);\r\n        animations.push([j - 1, j]);\r\n        animations.push([j - 1, mainArray[j]]);\r\n        //swmainArraypping\r\n        let temp = mainArray[j - 1];\r\n        mainArray[j - 1] = mainArray[j];\r\n        mainArray[j] = temp;\r\n        animations.push([j - 1, j]);\r\n        animations.push([j - 1, j]);\r\n        animations.push([j, mainArray[j]]);\r\n      }\r\n      //in order\r\n      else {\r\n        break;\r\n      }\r\n      j--;\r\n    }\r\n  }\r\n}","import React from \"react\";\r\nimport { getMergeSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms\";\r\nimport { getBubbleSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms\";\r\nimport { getSelectionSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms\";\r\nimport { getHeapSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms\";\r\nimport { getInsertionSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms\";\r\nimport { getQuickSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms\";\r\nimport \"./SortingVisualizer.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 6;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 70;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"#ADEFD1FF\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"#00203FFF\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 500));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSort() {\r\n    const animations = getHeapSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectionSort() {\r\n    const animations = getSelectionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  insertionSort() {\r\n    const animations = getInsertionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 50; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 100);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(0, 100));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container container-fluid\">\r\n        <div className=\"nav container-fluid\">\r\n          Project: Merge the Array Using Diffrent Sorting Techniques.\r\n        </div>\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar mt-1\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}\r\n          ></div>\r\n        ))}\r\n        <div className=\"row allbuttons\">\r\n        <button\r\n          className=\"btn btn-outline-dark m-2\"\r\n          onClick={() => this.resetArray()}\r\n        >\r\n          Generate New Array\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-dark m-2\"\r\n          onClick={() => this.mergeSort()}\r\n        >\r\n          Merge Sort\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-dark m-2\"\r\n          onClick={() => this.heapSort()}\r\n        >\r\n          Heap Sort\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-dark m-2\"\r\n          onClick={() => this.quickSort()}\r\n        >\r\n          Quick Sort\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-dark m-2\"\r\n          onClick={() => this.selectionSort()}\r\n        >\r\n          Selection Sort\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-dark m-2\"\r\n          onClick={() => this.bubbleSort()}\r\n        >\r\n          Bubble Sort\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-dark m-2\"\r\n          onClick={() => this.insertionSort()}\r\n        >\r\n          Insertion Sort\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-dark m-2\"\r\n          onClick={() => this.testSortingAlgorithms()}\r\n        >\r\n            Test Algo\r\n        </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}